<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="33" failures="0" errors="0" time="2.596">
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2024-11-01T08:15:55" time="1.695" tests="1">
    <testcase classname=" mocking add function" name=" mocking add function" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="Test suite for config testing using snapshot" errors="0" failures="0" skipped="0" timestamp="2024-11-01T08:15:55" time="1.713" tests="1">
    <testcase classname="Test suite for config testing using snapshot this test covers feature of snapshot testing" name="Test suite for config testing using snapshot this test covers feature of snapshot testing" time="0.04">
    </testcase>
  </testsuite>
  <testsuite name="Welcome" errors="0" failures="0" skipped="0" timestamp="2024-11-01T08:15:55" time="1.715" tests="1">
    <testcase classname="Welcome greetings should return &quot;Hello World&quot;" name="Welcome greetings should return &quot;Hello World&quot;" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="UserService" errors="0" failures="0" skipped="0" timestamp="2024-11-01T08:15:55" time="1.814" tests="13">
    <testcase classname="UserService createUser should create user with required fields" name="UserService createUser should create user with required fields" time="0.012">
    </testcase>
    <testcase classname="UserService createUser should throw error when required fields are missing" name="UserService createUser should throw error when required fields are missing" time="0.017">
    </testcase>
    <testcase classname="UserService validateEmail should validate email valid@email.com correctly" name="UserService validateEmail should validate email valid@email.com correctly" time="0.001">
    </testcase>
    <testcase classname="UserService validateEmail should validate email invalid-email correctly" name="UserService validateEmail should validate email invalid-email correctly" time="0">
    </testcase>
    <testcase classname="UserService validateEmail should validate email user@domain correctly" name="UserService validateEmail should validate email user@domain correctly" time="0">
    </testcase>
    <testcase classname="UserService validateEmail should validate email  correctly" name="UserService validateEmail should validate email  correctly" time="0.001">
    </testcase>
    <testcase classname="UserService Username Formating should format &quot;John Doe&quot; to &quot;John Doe&quot;" name="UserService Username Formating should format &quot;John Doe&quot; to &quot;John Doe&quot;" time="0.001">
    </testcase>
    <testcase classname="UserService Username Formating should format &quot;  John     Doe  &quot; to &quot;John Doe&quot;" name="UserService Username Formating should format &quot;  John     Doe  &quot; to &quot;John Doe&quot;" time="0">
    </testcase>
    <testcase classname="UserService Username Formating should format &quot;John &quot; to &quot;John&quot;" name="UserService Username Formating should format &quot;John &quot; to &quot;John&quot;" time="0">
    </testcase>
    <testcase classname="UserService Username Formating should format &quot; Doe&quot; to &quot;Doe&quot;" name="UserService Username Formating should format &quot; Doe&quot; to &quot;Doe&quot;" time="0">
    </testcase>
    <testcase classname="UserService Username Formating should format &quot;  Alice   Smith&quot; to &quot;Alice Smith&quot;" name="UserService Username Formating should format &quot;  Alice   Smith&quot; to &quot;Alice Smith&quot;" time="0">
    </testcase>
    <testcase classname="UserService Username Formating should format &quot;Bob   &quot; to &quot;Bob&quot;" name="UserService Username Formating should format &quot;Bob   &quot; to &quot;Bob&quot;" time="0">
    </testcase>
    <testcase classname="UserService Username Formating should format &quot;       &quot; to &quot;&quot;" name="UserService Username Formating should format &quot;       &quot; to &quot;&quot;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ProductService" errors="0" failures="0" skipped="0" timestamp="2024-11-01T08:15:55" time="1.839" tests="10">
    <testcase classname="ProductService calculateDiscount should calculate 100 with 10% discount to be 90" name="ProductService calculateDiscount should calculate 100 with 10% discount to be 90" time="0.01">
    </testcase>
    <testcase classname="ProductService calculateDiscount should calculate 50 with 20% discount to be 40" name="ProductService calculateDiscount should calculate 50 with 20% discount to be 40" time="0">
    </testcase>
    <testcase classname="ProductService calculateDiscount should calculate 100 with 0% discount to be 100" name="ProductService calculateDiscount should calculate 100 with 0% discount to be 100" time="0.001">
    </testcase>
    <testcase classname="ProductService calculateDiscount should throw error for invalid inputs" name="ProductService calculateDiscount should throw error for invalid inputs" time="0.016">
    </testcase>
    <testcase classname="ProductService isInStock should return true for products with quantity &gt; 0" name="ProductService isInStock should return true for products with quantity &gt; 0" time="0.001">
    </testcase>
    <testcase classname="ProductService isInStock should return false for products with quantity = 0" name="ProductService isInStock should return false for products with quantity = 0" time="0.001">
    </testcase>
    <testcase classname="ProductService formatPrice should format 99.99 to $99.99" name="ProductService formatPrice should format 99.99 to $99.99" time="0.034">
    </testcase>
    <testcase classname="ProductService formatPrice should format 100 to $100.00" name="ProductService formatPrice should format 100 to $100.00" time="0.001">
    </testcase>
    <testcase classname="ProductService formatPrice should format 1234.5 to $1,234.50" name="ProductService formatPrice should format 1234.5 to $1,234.50" time="0.001">
    </testcase>
    <testcase classname="ProductService formatPrice should format 0 to $0.00" name="ProductService formatPrice should format 0 to $0.00" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Configuration Object" errors="0" failures="0" skipped="0" timestamp="2024-11-01T08:15:55" time="1.874" tests="7">
    <testcase classname="Configuration Object should have a port property with value 3000" name="Configuration Object should have a port property with value 3000" time="0.019">
    </testcase>
    <testcase classname="Configuration Object should have a host property with value &quot;localhost&quot;" name="Configuration Object should have a host property with value &quot;localhost&quot;" time="0.001">
    </testcase>
    <testcase classname="Configuration Object Database Configuration should have a db property" name="Configuration Object Database Configuration should have a db property" time="0.001">
    </testcase>
    <testcase classname="Configuration Object Database Configuration db should have a host property with value &quot;localhost&quot;" name="Configuration Object Database Configuration db should have a host property with value &quot;localhost&quot;" time="0.001">
    </testcase>
    <testcase classname="Configuration Object Database Configuration db should have a user property with value &quot;root&quot;" name="Configuration Object Database Configuration db should have a user property with value &quot;root&quot;" time="0.001">
    </testcase>
    <testcase classname="Configuration Object Database Configuration db should have a password property with value &quot;123&quot;" name="Configuration Object Database Configuration db should have a password property with value &quot;123&quot;" time="0.001">
    </testcase>
    <testcase classname="Configuration Object Database Configuration db should have a database property with value &quot;node_db&quot;" name="Configuration Object Database Configuration db should have a database property with value &quot;node_db&quot;" time="0">
    </testcase>
  </testsuite>
</testsuites>